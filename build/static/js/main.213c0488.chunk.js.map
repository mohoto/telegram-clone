{"version":3,"sources":["threadSlice.js","components/SidebarThread.js","userSlice.js","misc/firebase.js","components/ModalAddThread.js","components/Sidebar.js","components/Message.js","components/Thread.js","components/Telegram.js","components/Login.js","App.js","reportWebVitals.js","store.js","index.js"],"names":["threadSlice","createSlice","name","initialState","thread","reducers","setThread","state","action","payload","threadId","actions","selectThread","threadReducer","reducer","SidebarThread","id","photo","useState","seed","setSeed","useEffect","Math","floor","random","useSelector","dispatch","useDispatch","className","onClick","threadName","Avatar","src","userSlice","user","loginUser","logout","selectUser","login","userReducer","firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","googleProvider","GoogleAuthProvider","db","firestore","FormDialog","openModalThread","handleClose","Dialog","open","onClose","aria-labelledby","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","label","type","fullWidth","value","onChange","event","target","DialogActions","Button","color","collection","add","Sidebar","setOpenModalThread","threads","setThreads","onSnapshot","snapshot","docs","map","doc","data","placeholder","IconButton","variant","alt","displayName","Message","message","uid","email","timestamp","Date","toDate","toLocaleTimeString","moment","locale","console","log","today","dd","getDate","getMonth","getFullYear","currDay","options","Thread","logOut","messages","setMessages","orderBy","input","setInput","anchorEl","setAnchorEl","Boolean","aria-label","aria-controls","aria-haspopup","currentTarget","Menu","keepMounted","PaperProps","style","maxHeight","ITEM_HEIGHT","width","option","MenuItem","selected","e","preventDefault","FieldValue","serverTimestamp","Telegram","Login","signInWithPopup","then","response","photoURL","catch","err","App","onAuthStateChanged","authUser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8WAEMA,EAAcC,YAAY,CAC5BC,KAAM,SACNC,aAAc,CACVC,OAAQ,MAEZC,SAAU,CACNC,UAAW,SAACC,EAAOC,GACfD,EAAMH,OAASI,EAAOC,QAAQC,aAK3BJ,EAAcN,EAAYW,QAA1BL,UAEFM,EAAe,SAAAL,GAAK,OAAIA,EAAMH,OAAOA,QAInCS,EAFOb,EAAYc,QCqBnBC,EA/BO,SAAC,GAAyB,IAAvBb,EAAsB,EAAtBA,KAAMc,EAAgB,EAAhBA,GAAgB,KAAZC,MAEPC,mBAAS,KAFU,mBAEpCC,EAFoC,KAE9BC,EAF8B,KAI3CC,qBAAU,WACND,EAAQE,KAAKC,MAAsB,IAAhBD,KAAKE,aACzB,IAEH,IAAMpB,EAASqB,YAAYb,GAErBc,EAAWC,cASjB,OACI,sBAAKC,UAAS,wBAAmBxB,GAAUY,EAAK,SAAW,IAAMa,QARjD,WAChBH,EAASpB,EAAU,CACfwB,WAAY5B,EACZQ,SAAUM,MAKd,UACI,cAACe,EAAA,EAAD,CAAQC,IAAG,qDAAgDb,EAAhD,UACX,sBAAKS,UAAU,yBAAf,UACI,6BAAK1B,IACL,iDACA,uBAAO0B,UAAU,2BAAjB,4BALoFZ,I,mDC1B9FiB,EAAYhC,YAAY,CAC1BC,KAAM,QACNC,aAAc,CACV+B,KAAM,MAEV7B,SAAU,CACN8B,UAAW,SAAC5B,EAAOC,GACfD,EAAM2B,KAAO1B,EAAOC,SAExB2B,OAAQ,SAAC7B,GACLA,EAAM2B,KAAO,S,EAKYD,EAAUtB,QAAhCwB,E,EAAAA,UAAWC,E,EAAAA,OAEbC,EAAa,SAAA9B,GAAK,OAAIA,EAAM+B,MAAMJ,MAIhCK,EAFKN,EAAUnB,Q,QCVxB0B,EAAcC,IAASC,cAVN,CACnBC,OAAQ,0CACRC,WAAY,uCACZC,YAAa,8CACbC,UAAW,uBACXC,cAAe,mCACfC,kBAAmB,eACnBC,MAAO,8CAILC,EAAOT,IAASS,OAChBC,EAAiB,IAAIV,IAASS,KAAKE,mBAI1BC,EAHJb,EAAYc,Y,+DCJR,SAASC,EAAT,GAAuD,IAAjCC,EAAgC,EAAhCA,gBAAiBC,EAAe,EAAfA,YAAe,EAErCvC,qBAFqC,mBAE1Dd,EAF0D,KAElDE,EAFkD,KAWjE,OACI,8BACI,eAACoD,EAAA,EAAD,CAAQC,KAAMH,EAAiBI,QAASH,EAAaI,kBAAgB,oBAArE,UACI,cAACC,EAAA,EAAD,CAAa9C,GAAG,oBAAhB,qBACA,eAAC+C,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,qCAGA,cAACC,EAAA,EAAD,CACIC,WAAS,EACTC,OAAO,QACPnD,GAAG,OACHoD,MAAM,cACNC,KAAK,OACLC,WAAS,EACTC,MAAOnE,EACPoE,SAAU,SAAAC,GAAK,OAAInE,EAAUmE,EAAMC,OAAOH,aAGlD,eAACI,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAQ/C,QAAS4B,EAAaoB,MAAM,UAApC,qBAGA,cAACD,EAAA,EAAD,CAAQ/C,QA9BN,WACdwB,EAAGyB,WAAW,WAAWC,IAAI,CACzB7E,KAAME,IAEVqD,KA0BwCoB,MAAM,UAAlC,6BC7BL,SAASG,IAAW,IAAD,EAEgB9D,oBAAS,GAFzB,mBAEvBsC,EAFuB,KAENyB,EAFM,KAYxB/C,EAAOT,YAAYY,GAZK,EAcAnB,qBAdA,mBAcvBgE,EAduB,KAcdC,EAdc,KA2B9B,OAXA9D,qBAAU,WACNgC,EAAGyB,WAAW,WAAWM,YAAW,SAAAC,GAAQ,OACxCF,EAAWE,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CACjCxE,GAAIwE,EAAIxE,GACRyE,KAAMD,EAAIC,iBAGnB,IAKC,sBAAK7D,UAAU,UAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,sBAAKA,UAAU,kBAAf,UACI,cAAC,IAAD,IACA,uBAAOyC,KAAK,OAAOqB,YAAY,YAAY9D,UAAU,4BAEzD,cAAC+D,EAAA,EAAD,CAAYC,QAAQ,WAAWhE,UAAU,kBAAkBC,QA9B/C,WACpBoD,GAAmB,IA6BX,SACI,cAAC,IAAD,SAGR,qBAAKrD,UAAU,mBAAf,gBAKKsD,QALL,IAKKA,OALL,EAKKA,EAASK,KAAI,SAAAnF,GAAM,OAChB,cAAC,EAAD,CAAeF,KAAME,EAAOqF,KAAKvF,KAAMc,GAAIZ,EAAOY,GAAIC,MAAOb,EAAOqF,KAAKxE,aAGjF,sBAAKW,UAAU,kBAAf,UACI,cAACG,EAAA,EAAD,CAAQH,UAAU,0BAA0BiE,IAAK3D,EAAK4D,YAAa9D,IAAKE,EAAKjB,QAC7E,cAAC0E,EAAA,EAAD,UACI,cAAC,IAAD,MAEJ,cAACA,EAAA,EAAD,UACI,cAAC,IAAD,MAEJ,cAACA,EAAA,EAAD,UACI,cAAC,IAAD,SAGR,cAAC,EAAD,CAAgBnC,gBAAiBA,EAAiBC,YAnDtC,WAChBwB,GAAmB,S,sJCPZ,SAASc,GAAT,GAA2E,IAAxD/E,EAAuD,EAAvDA,GAAuD,IAAnDyE,KAAQO,EAA2C,EAA3CA,QAAc/E,GAA6B,EAAlCgF,IAAkC,EAA7BhF,OAAOiF,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,UAEhEjE,EAAOT,YAAYY,GAEzB,OACI,sBAAKT,UAAS,kBAAaM,EAAKgE,QAAUA,GAAS,mBAAnD,UACI,cAACnE,EAAA,EAAD,CAAQC,IAAKf,EAAOW,UAAU,mBAC9B,sBAAKA,UAAU,oBAAf,UACI,4BAAIoE,IACJ,4BAAI,IAAII,KAAJ,OAASD,QAAT,IAASA,OAAT,EAASA,EAAWE,UAAUC,uBAClC,gCAAQC,KAAOC,gBALsDxF,GAPrFyF,QAAQC,IAAI,OARI,WACZ,IAAMC,EAAQ,IAAIP,KACZQ,EAAKD,EAAME,UACNF,EAAMG,WACNH,EAAMI,cACjB,OAAOH,EAGSI,ICIpB,IAAMC,GAAU,CACZ,cACA,WAMW,SAASC,KAGpB,IAAMhF,EAAOT,YAAYY,GACnBjC,EAASqB,YAAYb,GAGrBc,EAAWC,cACXwF,EAAS,WACXzF,EAASU,MATgB,EAYGlB,qBAZH,mBAYtBkG,EAZsB,KAYZC,EAZY,KAc7BhG,qBAAU,WACFjB,GACAiD,EAAGyB,WAAW,WACTU,IAAIpF,GACJ0E,WAAW,YAAYwC,QAAQ,YAAa,OAAOlC,YAAW,SAAAC,GAAQ,OACnEgC,EAAYhC,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CAClCxE,GAAIwE,EAAIxE,GACRyE,KAAMD,EAAIC,iBAI3B,CAACrF,IAEJqG,QAAQC,IAAIU,GA3BiB,MA6BHlG,mBAAS,IA7BN,mBA6BtBqG,EA7BsB,KA6BfC,EA7Be,OAmDGtG,mBAAS,MAnDZ,mBAmDtBuG,EAnDsB,KAmDZC,EAnDY,KAoDvB/D,EAAOgE,QAAQF,GAMfhE,EAAc,WAChBiE,EAAY,OAGhB,OACI,sBAAK9F,UAAU,SAAf,UACI,sBAAKA,UAAU,iBAAf,UACI,sBAAKA,UAAU,2BAAf,UACI,cAACG,EAAA,EAAD,CAAQ8D,IAAK3D,EAAK4D,YAAa9D,IAAKE,EAAKjB,QACzC,sBAAKW,UAAU,iCAAf,UACI,6BAAKM,EAAK4D,cACV,iDAGR,cAACH,EAAA,EAAD,CACIiC,aAAW,OACXC,gBAAc,YACdC,gBAAc,OACdjG,QAtBI,SAAC4C,GACjBiD,EAAYjD,EAAMsD,gBAiBV,SAMI,cAAC,IAAD,CAAenG,UAAU,8BAE7B,cAACoG,GAAA,EAAD,CACIhH,GAAG,YACHyG,SAAUA,EACVQ,aAAW,EACXtE,KAAMA,EACNC,QAASH,EACTyE,WAAY,CACRC,MAAO,CACHC,UAAWC,IACXC,MAAO,SATnB,SAaKrB,GAAQ1B,KAAI,SAACgD,GAAD,OACT,cAACC,GAAA,EAAD,CAAuBC,SAAqB,gBAAXF,EAA0B1G,QAAoB,gBAAX0G,EAA2BpB,EAAS1D,EAAxG,SACK8E,GADUA,WAM3B,qBAAK3G,UAAU,mBAAf,gBACKwF,QADL,IACKA,OADL,EACKA,EAAU7B,KAAI,SAAAS,GAAO,OAClB,cAAC,GAAD,CAAShF,GAAIgF,EAAQhF,GAAIyE,KAAMO,EAAQP,YAG/C,qBAAK7D,UAAU,gBAAf,SACI,iCACI,cAAC+D,EAAA,EAAD,UACI,cAAC,KAAD,MAEJ,uBAAOD,YAAY,UAAUnB,MAAOgD,EAAO/C,SAAU,SAAAkE,GAAC,OAAIlB,EAASkB,EAAEhE,OAAOH,UAC5E,cAACoB,EAAA,EAAD,UACI,cAAC,IAAD,MAEJ,cAACA,EAAA,EAAD,UACI,cAAC,IAAD,CAAUtB,KAAK,SAASzC,UAAU,2BAA2BC,QApF7D,SAAA6G,GAChBA,EAAEC,iBACEvI,GACAiD,EAAGyB,WAAW,WACTU,IAAIpF,GACJ0E,WAAW,YAAYC,IAAI,CACxBoB,UAAW1D,IAASa,UAAUsF,WAAWC,kBACzC7C,QAASuB,EACTtB,IAAK/D,EAAK+D,IACVhF,MAAOiB,EAAKjB,MACZiF,MAAOhE,EAAKgE,MACZhG,KAAMgC,EAAK4D,cAEnB0B,EAAS,KAGTA,EAAS,SAsED,cAAC7B,EAAA,EAAD,UACI,cAAC,KAAD,cC5IT,SAASmD,KACpB,OACI,sBAAKlH,UAAU,WAAf,UACI,cAAC,EAAD,IACA,cAAC,GAAD,O,OCDG,SAASmH,KAEHpH,cAkBjB,OACI,qBAAKC,UAAU,QAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,qBAAKI,IAAI,wEAAwE6D,IAAI,gBACrF,cAACjB,EAAA,EAAD,CAAQgB,QAAQ,YAAY/D,QApBzB,WACXqB,EAAK8F,gBAAgB7F,GAAgB8F,MAAK,SAAAC,GAAQ,OAC9C7F,EAAGyB,WAAW,WAAWC,IAAI,CACzBkB,IAAKiD,EAAShH,KAAK+D,IACnBhF,MAAOiI,EAAShH,KAAKiH,SACrBjD,MAAOgD,EAAShH,KAAKgE,MACrBhG,KAAMgJ,EAAShH,KAAK4D,iBAIvBsD,OAAM,SAAAC,GAAG,OAAI5C,QAAQC,IAAI2C,EAAIrD,aAU1B,2CCUDsD,OAlCf,WAME,IAAMpH,EAAOT,YAAYY,GACnBX,EAAWC,cAoBjB,OAlBAN,qBAAU,WAER6B,EAAKqG,oBAAmB,SAACC,GAErB9H,EADE8H,EACOrH,EAAU,CACjB8D,IAAKuD,EAASvD,IACdhF,MAAOuI,EAASL,SAChBjD,MAAOsD,EAAStD,MAChBJ,YAAa0D,EAAS1D,cAIf1D,QAGZ,CAACV,IAIF,qBAAKE,UAAU,MAAf,SACIM,EAAmB,cAAC,GAAD,IAAZ,cAAC,GAAD,OCzBAuH,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCGCO,GANDC,YAAe,CACzBpJ,QAAS,CACLwB,MAAOC,EACPnC,OAAQS,KCEhBsJ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUJ,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJK,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.213c0488.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst threadSlice = createSlice({\n    name: 'thread',\n    initialState: {\n        thread: null,\n    },\n    reducers: {\n        setThread: (state, action) => {\n            state.thread = action.payload.threadId\n        }\n    }\n})\n\nexport const { setThread } = threadSlice.actions;\n\nexport const selectThread = state => state.thread.thread;\n\nconst threadReducer = threadSlice.reducer;\n\nexport default threadReducer;","/*rfce*/\nimport React, { useState, useEffect } from 'react';\nimport './SidebarThread.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setThread } from '../threadSlice'\nimport { selectThread } from '../threadSlice';\n\nconst SidebarThread = ({ name, id, photo }) => {\n\n    const [seed, setSeed] = useState('');\n\n    useEffect(() => {\n        setSeed(Math.floor(Math.random() * 5000));\n    }, []);\n\n    const thread = useSelector(selectThread);\n\n    const dispatch = useDispatch();\n\n    const threadClick = () => {\n        dispatch(setThread({\n            threadName: name,\n            threadId: id\n        }))\n    }\n\n    return (\n        <div className={`sidebarThread ${thread == id ? \"active\" : \"\"}`} onClick={threadClick} key={id}>\n            <Avatar src={`https://avatars.dicebear.com/api/avataaars/${seed}.svg`} />\n            <div className=\"sidebarThread__details\">\n                <h3>{name}</h3>\n                <p>This is the info</p>\n                <small className=\"sidebarThread__timestamp\">Timestamp</small>\n            </div>\n        </div>\n    )\n}\n\nexport default SidebarThread\n\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst userSlice = createSlice({\n    name: 'login',\n    initialState: {\n        user: null\n    },\n    reducers: {\n        loginUser: (state, action) => {\n            state.user = action.payload\n        },\n        logout: (state) => {\n            state.user = null\n        }\n    }\n})\n\nexport const { loginUser, logout } = userSlice.actions;\n\nexport const selectUser = state => state.login.user;\n\nconst userReducer = userSlice.reducer;\n\nexport default userReducer;","import firebase from 'firebase'\nconst firebaseConfig = {\n    apiKey: \"AIzaSyCwSCZi0QVI7hOuN1czWK2WpSmg7xa7JXc\",\n    authDomain: \"telegram-clone-64646.firebaseapp.com\",\n    databaseURL: \"https://telegram-clone-64646.firebaseio.com\",\n    projectId: \"telegram-clone-64646\",\n    storageBucket: \"telegram-clone-64646.appspot.com\",\n    messagingSenderId: \"545137159103\",\n    appId: \"1:545137159103:web:1619c6abb14eb2aca5cf0a\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\nconst auth = firebase.auth();\nconst googleProvider = new firebase.auth.GoogleAuthProvider();\nconst db = firebaseApp.firestore();\n\nexport { auth, googleProvider };\nexport default db;","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport db from '../misc/firebase'\n\nexport default function FormDialog({ openModalThread, handleClose }) {\n\n    const [thread, setThread] = useState();\n\n    const addThread = () => {\n        db.collection('threads').add({\n            name: thread\n        })\n        handleClose();\n    }\n\n    return (\n        <div>\n            <Dialog open={openModalThread} onClose={handleClose} aria-labelledby=\"form-dialog-title\">\n                <DialogTitle id=\"form-dialog-title\">Ajouter</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        Ajouter un utilisateur\n                    </DialogContentText>\n                    <TextField\n                        autoFocus\n                        margin=\"dense\"\n                        id=\"name\"\n                        label=\"utilisateur\"\n                        type=\"text\"\n                        fullWidth\n                        value={thread}\n                        onChange={event => setThread(event.target.value)}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClose} color=\"primary\">\n                        Annuler\n          </Button>\n                    <Button onClick={addThread} color=\"primary\">\n                        Ajouter\n          </Button>\n                </DialogActions>\n            </Dialog>\n        </div>\n    );\n}\n","import React, { useState, useEffect } from 'react';\nimport './Sidebar.css';\nimport SearchIcon from '@material-ui/icons/Search';\nimport BorderColorOutlinedIcon from '@material-ui/icons/BorderColor';\nimport IconButton from '@material-ui/core/IconButton';\nimport SidebarThread from './SidebarThread';\nimport Avatar from '@material-ui/core/Avatar';\nimport PhoneOutlinedIcon from '@material-ui/icons/PhoneOutlined';\nimport QuestionAnswerOutlinedIcon from '@material-ui/icons/QuestionAnswerOutlined';\nimport SettingsApplicationsOutlinedIcon from '@material-ui/icons/SettingsApplicationsOutlined';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from '../userSlice';\nimport db from '../misc/firebase';\nimport ModalAddThread from './ModalAddThread';\n\nexport default function Sidebar() {\n\n    const [openModalThread, setOpenModalThread] = useState(false)\n\n    const handleModalOpen = () => {\n        setOpenModalThread(true);\n    };\n\n    const handleClose = () => {\n        setOpenModalThread(false);\n    };\n\n    const user = useSelector(selectUser);\n\n    const [threads, setThreads] = useState();\n\n    useEffect(() => {\n        db.collection('threads').onSnapshot(snapshot =>\n            setThreads(snapshot.docs.map(doc => ({\n                id: doc.id,\n                data: doc.data()\n            })))\n        )\n    }, []);\n\n\n\n    return (\n        <div className=\"sidebar\">\n            <div className=\"sidebar__header\">\n                <div className=\"sidebar__search\">\n                    <SearchIcon />\n                    <input type=\"text\" placeholder=\"Recherche\" className=\"sidebar__searchInput\" />\n                </div>\n                <IconButton variant=\"outlined\" className=\"sidebar__button\" onClick={handleModalOpen}>\n                    <BorderColorOutlinedIcon />\n                </IconButton>\n            </div>\n            <div className=\"sidebar__threads\">\n                {/*{threads?.filter(thread => thread.data.uid !== user.uid)\n                    .map(thread =>\n                        <SidebarThread name={thread.data.name} id={thread.id} photo={thread.data.photo} />\n                    )}  */}\n                {threads?.map(thread =>\n                    <SidebarThread name={thread.data.name} id={thread.id} photo={thread.data.photo} />\n                )}\n            </div>\n            <div className=\"sidebar__bottom\">\n                <Avatar className=\"sidebar__bottom__avatar\" alt={user.displayName} src={user.photo} />\n                <IconButton>\n                    <PhoneOutlinedIcon />\n                </IconButton>\n                <IconButton>\n                    <QuestionAnswerOutlinedIcon />\n                </IconButton>\n                <IconButton>\n                    <SettingsApplicationsOutlinedIcon />\n                </IconButton>\n            </div>\n            <ModalAddThread openModalThread={openModalThread} handleClose={handleClose} />\n        </div>\n    )\n}\n","import React from 'react'\nimport Avatar from '@material-ui/core/Avatar';\nimport './Message.css'\nimport { selectUser } from '../userSlice';\nimport { useSelector } from 'react-redux';\nimport moment from 'moment'\n\nconst currDay = () => {\n    const today = new Date();\n    const dd = today.getDate();\n    const mm = today.getMonth();\n    const yy = today.getFullYear();\n    return dd;\n}\n\nconsole.log('jour', currDay());\n\nexport default function Message({ id, data: { message, uid, photo, email, timestamp } }) {\n\n    const user = useSelector(selectUser);\n\n    return (\n        <div className={`message ${user.email === email && 'message__sender'}`} key={id} >\n            <Avatar src={photo} className=\"message__photo\" />\n            <div className=\"message__contents\">\n                <p>{message}</p>\n                <p>{new Date(timestamp?.toDate()).toLocaleTimeString()}</p>\n                <small>{moment.locale()}</small>\n            </div>\n        </div >\n    )\n}\n","import React, { useState, useEffect } from 'react';\nimport './Thread.css';\nimport Avatar from '@material-ui/core/Avatar';\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\nimport IconButton from '@material-ui/core/IconButton';\nimport SendIcon from '@material-ui/icons/Send';\nimport TimerOutlinedIcon from '@material-ui/icons/TimerOutlined';\nimport MicNoneOutlinedIcon from '@material-ui/icons/MicNoneOutlined';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { logout } from '../userSlice';\nimport { selectUser } from '../userSlice';\nimport { selectThread } from '../threadSlice';\nimport db from '../misc/firebase';\nimport firebase from 'firebase';\nimport Message from './Message'\n\nconst options = [\n    'Deconnexion',\n    'Profile'\n\n];\n\nconst ITEM_HEIGHT = 48;\n\nexport default function Thread() {\n\n\n    const user = useSelector(selectUser);\n    const thread = useSelector(selectThread);\n\n    /***LogOut**/\n    const dispatch = useDispatch();\n    const logOut = () => {\n        dispatch(logout());\n    }\n\n    const [messages, setMessages] = useState();\n\n    useEffect(() => {\n        if (thread) {\n            db.collection('threads')\n                .doc(thread)\n                .collection('messages').orderBy('timestamp', 'asc').onSnapshot(snapshot =>\n                    setMessages(snapshot.docs.map(doc => ({\n                        id: doc.id,\n                        data: doc.data()\n                    })))\n                )\n        }\n    }, [thread]);\n\n    console.log(messages);\n\n    const [input, setInput] = useState('');\n\n    const sendMessage = e => {\n        e.preventDefault();\n        if (thread) {\n            db.collection('threads')\n                .doc(thread)\n                .collection('messages').add({\n                    timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                    message: input,\n                    uid: user.uid,\n                    photo: user.photo,\n                    email: user.email,\n                    name: user.displayName\n                })\n            setInput('');\n        }\n        else {\n            setInput('');\n        }\n    }\n    /******Menu More************/\n    const [anchorEl, setAnchorEl] = useState(null);\n    const open = Boolean(anchorEl);\n\n    const handleClick = (event) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    return (\n        <div className=\"thread\">\n            <div className=\"thread__header\">\n                <div className=\"thread__header__contents\">\n                    <Avatar alt={user.displayName} src={user.photo} />\n                    <div className=\"thread__header__contents__info\">\n                        <h4>{user.displayName}</h4>\n                        <h5>Last seen</h5>\n                    </div>\n                </div>\n                <IconButton\n                    aria-label=\"more\"\n                    aria-controls=\"long-menu\"\n                    aria-haspopup=\"true\"\n                    onClick={handleClick}\n                >\n                    <MoreHorizIcon className=\"thread__header__details\" />\n                </IconButton>\n                <Menu\n                    id=\"long-menu\"\n                    anchorEl={anchorEl}\n                    keepMounted\n                    open={open}\n                    onClose={handleClose}\n                    PaperProps={{\n                        style: {\n                            maxHeight: ITEM_HEIGHT * 4.5,\n                            width: '20ch',\n                        },\n                    }}\n                >\n                    {options.map((option) => (\n                        <MenuItem key={option} selected={option === 'Deconnexion'} onClick={option === 'Deconnexion' ? logOut : handleClose}>\n                            {option}\n                        </MenuItem>\n                    ))}\n                </Menu>\n            </div>\n            <div className=\"thread__messages\">\n                {messages?.map(message =>\n                    <Message id={message.id} data={message.data} />\n                )}\n            </div>\n            <div className=\"thread__input\">\n                <form>\n                    <IconButton>\n                        <InsertEmoticonIcon />\n                    </IconButton>\n                    <input placeholder=\"message\" value={input} onChange={e => setInput(e.target.value)} />\n                    <IconButton>\n                        <TimerOutlinedIcon />\n                    </IconButton>\n                    <IconButton>\n                        <SendIcon type=\"submit\" className=\"thread__messages__button\" onClick={sendMessage} />\n                    </IconButton>\n                    <IconButton>\n                        <MicNoneOutlinedIcon />\n                    </IconButton>\n                </form>\n            </div>\n        </div>\n    )\n}\n","import React from 'react'\nimport './Telegram.css';\nimport Sidebar from './Sidebar';\nimport Thread from './Thread';\n\nexport default function Telegram() {\n    return (\n        <div className=\"telegram\">\n            <Sidebar />\n            <Thread />\n        </div>\n    )\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button';\nimport './Login.css';\nimport { useDispatch } from 'react-redux';\nimport { loginUser } from '../userSlice';\nimport { auth, googleProvider } from '../misc/firebase'\nimport db from '../misc/firebase'\n\nexport default function Login() {\n\n    const dispatch = useDispatch();\n\n    const signIn = () => {\n        auth.signInWithPopup(googleProvider).then(response =>\n            db.collection('threads').add({\n                uid: response.user.uid,\n                photo: response.user.photoURL,\n                email: response.user.email,\n                name: response.user.displayName\n\n            })\n        )\n            .catch(err => console.log(err.message));\n        /* dispatch(loginUser(\n            'walid'\n        )) */\n    }\n\n    return (\n        <div className=\"login\">\n            <div className=\"login__container\">\n                <img src=\"https://upload.wikimedia.org/wikipedia/commons/8/82/Telegram_logo.svg\" alt=\"logo google\" />\n                <Button variant=\"contained\" onClick={signIn}>\n                    Se connecter avec google\n                </Button>\n            </div>\n        </div >\n    )\n}\n","import { useEffect } from 'react';\nimport Telegram from './components/Telegram';\nimport Login from './components/Login';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectUser } from './userSlice';\nimport { auth } from './misc/firebase'\nimport { loginUser, logout } from './userSlice'\n\nfunction App() {\n\n  /* const { user } = useSelector(state => ({\n    ...state.user\n  })); */\n\n  const user = useSelector(selectUser);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n\n    auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        dispatch(loginUser({\n          uid: authUser.uid,\n          photo: authUser.photoURL,\n          email: authUser.email,\n          displayName: authUser.displayName\n        }))\n      }\n      else {\n        dispatch(logout)\n      }\n    })\n  }, [dispatch])\n\n\n  return (\n    <div className=\"App\">\n      {!user ? <Login /> : <Telegram />}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit'\nimport userReducer from './userSlice'\nimport threadReducer from './threadSlice'\n\nconst store = configureStore({\n    reducer: {\n        login: userReducer,\n        thread: threadReducer\n    }\n})\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}